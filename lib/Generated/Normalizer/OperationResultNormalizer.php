<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Generated\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OperationResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Generated\\Model\\OperationResult';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Generated\\Model\\OperationResult';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Generated\Model\OperationResult();
        if (property_exists($data, 'remainingAmount')) {
            $object->setRemainingAmount($data->{'remainingAmount'});
        }
        if (property_exists($data, 'appliedBonuses')) {
            $object->setAppliedBonuses($data->{'appliedBonuses'});
        }
        if (property_exists($data, 'collectedBonuses')) {
            $object->setCollectedBonuses($data->{'collectedBonuses'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getRemainingAmount()) {
            $data->{'remainingAmount'} = $object->getRemainingAmount();
        }
        if (null !== $object->getAppliedBonuses()) {
            $data->{'appliedBonuses'} = $object->getAppliedBonuses();
        }
        if (null !== $object->getCollectedBonuses()) {
            $data->{'collectedBonuses'} = $object->getCollectedBonuses();
        }

        return $data;
    }
}
