<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Generated\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CalculationQueryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQuery';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQuery';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Generated\Model\CalculationQuery();
        if (property_exists($data, 'client')) {
            $object->setClient($this->denormalizer->denormalize($data->{'client'}, 'CloudLoyalty\\Api\\Generated\\Model\\ClientQuery', 'json', $context));
        }
        if (property_exists($data, 'shop')) {
            $object->setShop($this->denormalizer->denormalize($data->{'shop'}, 'CloudLoyalty\\Api\\Generated\\Model\\ShopQuery', 'json', $context));
        }
        if (property_exists($data, 'cashier')) {
            $object->setCashier($this->denormalizer->denormalize($data->{'cashier'}, 'CloudLoyalty\\Api\\Generated\\Model\\CashierQuery', 'json', $context));
        }
        if (property_exists($data, 'executedAt')) {
            $object->setExecutedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'executedAt'}));
        }
        if (property_exists($data, 'rows')) {
            $values = [];
            foreach ($data->{'rows'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQueryRow', 'json', $context);
            }
            $object->setRows($values);
        }
        if (property_exists($data, 'applyBonuses')) {
            $object->setApplyBonuses($data->{'applyBonuses'});
        }
        if (property_exists($data, 'collectBonuses')) {
            $object->setCollectBonuses($data->{'collectBonuses'});
        }
        if (property_exists($data, 'promocode')) {
            $object->setPromocode($data->{'promocode'});
        }
        if (property_exists($data, 'discountRoundStep')) {
            $object->setDiscountRoundStep($data->{'discountRoundStep'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getClient()) {
            $data->{'client'} = $this->normalizer->normalize($object->getClient(), 'json', $context);
        }
        if (null !== $object->getShop()) {
            $data->{'shop'} = $this->normalizer->normalize($object->getShop(), 'json', $context);
        }
        if (null !== $object->getCashier()) {
            $data->{'cashier'} = $this->normalizer->normalize($object->getCashier(), 'json', $context);
        }
        if (null !== $object->getExecutedAt()) {
            $data->{'executedAt'} = $object->getExecutedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getRows()) {
            $values = [];
            foreach ($object->getRows() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'rows'} = $values;
        }
        if (null !== $object->getApplyBonuses()) {
            $data->{'applyBonuses'} = $object->getApplyBonuses();
        }
        if (null !== $object->getCollectBonuses()) {
            $data->{'collectBonuses'} = $object->getCollectBonuses();
        }
        if (null !== $object->getPromocode()) {
            $data->{'promocode'} = $object->getPromocode();
        }
        if (null !== $object->getDiscountRoundStep()) {
            $data->{'discountRoundStep'} = $object->getDiscountRoundStep();
        }

        return $data;
    }
}
