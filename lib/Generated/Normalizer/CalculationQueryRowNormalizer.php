<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Generated\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CalculationQueryRowNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQueryRow';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQueryRow';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Generated\Model\CalculationQueryRow();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'product')) {
            $object->setProduct($this->denormalizer->denormalize($data->{'product'}, 'CloudLoyalty\\Api\\Generated\\Model\\CalculationQueryRowProduct', 'json', $context));
        }
        if (property_exists($data, 'qty')) {
            $object->setQty($data->{'qty'});
        }
        if (property_exists($data, 'autoDiscount')) {
            $object->setAutoDiscount($data->{'autoDiscount'});
        }
        if (property_exists($data, 'manualDiscount')) {
            $object->setManualDiscount($data->{'manualDiscount'});
        }
        if (property_exists($data, 'noApplyBonuses')) {
            $object->setNoApplyBonuses($data->{'noApplyBonuses'});
        }
        if (property_exists($data, 'noCollectBonuses')) {
            $object->setNoCollectBonuses($data->{'noCollectBonuses'});
        }
        if (property_exists($data, 'noPromocode')) {
            $object->setNoPromocode($data->{'noPromocode'});
        }
        if (property_exists($data, 'noOffer')) {
            $object->setNoOffer($data->{'noOffer'});
        }
        if (property_exists($data, 'maxDiscount')) {
            $object->setMaxDiscount($data->{'maxDiscount'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getProduct()) {
            $data->{'product'} = $this->normalizer->normalize($object->getProduct(), 'json', $context);
        }
        if (null !== $object->getQty()) {
            $data->{'qty'} = $object->getQty();
        }
        if (null !== $object->getAutoDiscount()) {
            $data->{'autoDiscount'} = $object->getAutoDiscount();
        }
        if (null !== $object->getManualDiscount()) {
            $data->{'manualDiscount'} = $object->getManualDiscount();
        }
        if (null !== $object->getNoApplyBonuses()) {
            $data->{'noApplyBonuses'} = $object->getNoApplyBonuses();
        }
        if (null !== $object->getNoCollectBonuses()) {
            $data->{'noCollectBonuses'} = $object->getNoCollectBonuses();
        }
        if (null !== $object->getNoPromocode()) {
            $data->{'noPromocode'} = $object->getNoPromocode();
        }
        if (null !== $object->getNoOffer()) {
            $data->{'noOffer'} = $object->getNoOffer();
        }
        if (null !== $object->getMaxDiscount()) {
            $data->{'maxDiscount'} = $object->getMaxDiscount();
        }

        return $data;
    }
}
