<?php

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Generated\Model;

class ApplyReturnRequestTransaction
{
    /**
     * Номер транзакции возврата в системе партнера
     *
     * @var string
     */
    protected $id;

    /**
     * Дата и время совершения транзакции
     *
     * @var \DateTime
     */
    protected $executedAt;

    /**
     * Номер транзакции/чека продажи, на основе которого делается возврат.
     *
     * Для интернет-магазина в этом поле передается номер подтвержденного заказа.
     * По неподтвержденному заказу делать возврат нельзя.
     *
     *
     * @var string
     */
    protected $purchaseId;

    /**
     * Общая сумма возвращаемых товаров
     *
     * @var float
     */
    protected $refundAmount;

    /**
     * Код магазина, в котором осуществляется операция
     *
     * @var string
     */
    protected $shopCode;

    /**
     * Полное название магазина, в котором осуществляется операция
     *
     * @var string
     */
    protected $shopName;

    /**
     * Имя продавца, который оформил возврат товара
     *
     * @var string
     */
    protected $cashier;

    /**
     * Табельный номер продавца, который оформил возврат товара
     *
     * @var string
     */
    protected $cashierId;

    /**
     * Список товаров для возврата
     *
     * @var ApplyReturnRequestTransactionItemsItem[]
     */
    protected $items;

    /**
     * Номер транзакции возврата в системе партнера
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Номер транзакции возврата в системе партнера
     *
     * @param string $id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->id = $id;
        return $this;
    }

    /**
     * Дата и время совершения транзакции
     *
     * @return \DateTime
     */
    public function getExecutedAt()
    {
        return $this->executedAt;
    }

    /**
     * Дата и время совершения транзакции
     *
     * @param \DateTime $executedAt
     *
     * @return self
     */
    public function setExecutedAt(\DateTime $executedAt)
    {
        $this->executedAt = $executedAt;
        return $this;
    }

    /**
     * Номер транзакции/чека продажи, на основе которого делается возврат.
     *
     * Для интернет-магазина в этом поле передается номер подтвержденного заказа.
     * По неподтвержденному заказу делать возврат нельзя.
     *
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->purchaseId;
    }

    /**
     * Номер транзакции/чека продажи, на основе которого делается возврат.
     *
     * Для интернет-магазина в этом поле передается номер подтвержденного заказа.
     * По неподтвержденному заказу делать возврат нельзя.
     *
     *
     * @param string $purchaseId
     *
     * @return self
     */
    public function setPurchaseId($purchaseId)
    {
        $this->purchaseId = $purchaseId;
        return $this;
    }

    /**
     * Общая сумма возвращаемых товаров
     *
     * @return float
     */
    public function getRefundAmount()
    {
        return $this->refundAmount;
    }

    /**
     * Общая сумма возвращаемых товаров
     *
     * @param float $refundAmount
     *
     * @return self
     */
    public function setRefundAmount($refundAmount)
    {
        $this->refundAmount = $refundAmount;
        return $this;
    }

    /**
     * Код магазина, в котором осуществляется операция
     *
     * @return string
     */
    public function getShopCode()
    {
        return $this->shopCode;
    }

    /**
     * Код магазина, в котором осуществляется операция
     *
     * @param string $shopCode
     *
     * @return self
     */
    public function setShopCode($shopCode)
    {
        $this->shopCode = $shopCode;
        return $this;
    }

    /**
     * Полное название магазина, в котором осуществляется операция
     *
     * @return string
     */
    public function getShopName()
    {
        return $this->shopName;
    }

    /**
     * Полное название магазина, в котором осуществляется операция
     *
     * @param string $shopName
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        $this->shopName = $shopName;
        return $this;
    }

    /**
     * Имя продавца, который оформил возврат товара
     *
     * @return string
     */
    public function getCashier()
    {
        return $this->cashier;
    }

    /**
     * Имя продавца, который оформил возврат товара
     *
     * @param string $cashier
     *
     * @return self
     */
    public function setCashier($cashier)
    {
        $this->cashier = $cashier;
        return $this;
    }

    /**
     * Табельный номер продавца, который оформил возврат товара
     *
     * @return string
     */
    public function getCashierId()
    {
        return $this->cashierId;
    }

    /**
     * Табельный номер продавца, который оформил возврат товара
     *
     * @param string $cashierId
     *
     * @return self
     */
    public function setCashierId($cashierId)
    {
        $this->cashierId = $cashierId;
        return $this;
    }

    /**
     * Список товаров для возврата
     *
     * @return ApplyReturnRequestTransactionItemsItem[]
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Список товаров для возврата
     *
     * @param ApplyReturnRequestTransactionItemsItem[] $items
     *
     * @return self
     */
    public function setItems(array $items)
    {
        $this->items = $items;
        return $this;
    }
}