<?php

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Generated\Model;

class AdjustBalanceRequestBalanceAdjustment
{
    /**
     * Кол-во бонусов, на которое необходимо изменить баланс.
     *
     * Для увеличения баланса задается положительное значение.
     * Для уменьшения баланса задается отрицательное значение.
     *
     *
     * @var float
     */
    protected $amountDelta;

    /**
     * Срок действия начисляемых бонусов в днях.
     *
     * Если не задано, срок действия бонусов будет таким же, как для начисляемых с покупки.
     *
     * Применимо только для операции увеличения баланса.
     *
     *
     * @var float
     */
    protected $expirationPeriodDays;

    /**
     * Дополнительные сведения о причинах изменения баланса
     *
     * @var string
     */
    protected $comment;

    /**
     * Указывает, необходимо ли оповестить клиента об изменении баланса.
     *
     * Успешная отправка уведомления клиенту зависит также от того, задан ли телефон/email у клиента,
     * а также подписан ли клиент на соответствующие уведомления.
     *
     *
     * @var bool
     */
    protected $notify;

    /**
     * Кол-во бонусов, на которое необходимо изменить баланс.
     *
     * Для увеличения баланса задается положительное значение.
     * Для уменьшения баланса задается отрицательное значение.
     *
     *
     * @return float
     */
    public function getAmountDelta()
    {
        return $this->amountDelta;
    }

    /**
     * Кол-во бонусов, на которое необходимо изменить баланс.
     *
     * Для увеличения баланса задается положительное значение.
     * Для уменьшения баланса задается отрицательное значение.
     *
     *
     * @param float $amountDelta
     *
     * @return self
     */
    public function setAmountDelta($amountDelta)
    {
        $this->amountDelta = $amountDelta;
        return $this;
    }

    /**
     * Срок действия начисляемых бонусов в днях.
     *
     * Если не задано, срок действия бонусов будет таким же, как для начисляемых с покупки.
     *
     * Применимо только для операции увеличения баланса.
     *
     *
     * @return float
     */
    public function getExpirationPeriodDays()
    {
        return $this->expirationPeriodDays;
    }

    /**
     * Срок действия начисляемых бонусов в днях.
     *
     * Если не задано, срок действия бонусов будет таким же, как для начисляемых с покупки.
     *
     * Применимо только для операции увеличения баланса.
     *
     *
     * @param float $expirationPeriodDays
     *
     * @return self
     */
    public function setExpirationPeriodDays($expirationPeriodDays)
    {
        $this->expirationPeriodDays = $expirationPeriodDays;
        return $this;
    }

    /**
     * Дополнительные сведения о причинах изменения баланса
     *
     * @return string
     */
    public function getComment()
    {
        return $this->comment;
    }

    /**
     * Дополнительные сведения о причинах изменения баланса
     *
     * @param string $comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->comment = $comment;
        return $this;
    }

    /**
     * Указывает, необходимо ли оповестить клиента об изменении баланса.
     *
     * Успешная отправка уведомления клиенту зависит также от того, задан ли телефон/email у клиента,
     * а также подписан ли клиент на соответствующие уведомления.
     *
     *
     * @return bool
     */
    public function getNotify()
    {
        return $this->notify;
    }

    /**
     * Указывает, необходимо ли оповестить клиента об изменении баланса.
     *
     * Успешная отправка уведомления клиенту зависит также от того, задан ли телефон/email у клиента,
     * а также подписан ли клиент на соответствующие уведомления.
     *
     *
     * @param bool $notify
     *
     * @return self
     */
    public function setNotify($notify)
    {
        $this->notify = $notify;
        return $this;
    }
}