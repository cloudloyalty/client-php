<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CalculationResultDiscountsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Model\\CalculationResultDiscounts';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Model\\CalculationResultDiscounts';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Model\CalculationResultDiscounts();
        if (property_exists($data, 'auto')) {
            $object->setAuto($data->{'auto'});
        }
        if (property_exists($data, 'manual')) {
            $object->setManual($data->{'manual'});
        }
        if (property_exists($data, 'bonuses')) {
            $object->setBonuses($data->{'bonuses'});
        }
        if (property_exists($data, 'promocode')) {
            $object->setPromocode($data->{'promocode'});
        }
        if (property_exists($data, 'offer')) {
            $object->setOffer($data->{'offer'});
        }
        if (property_exists($data, 'rounding')) {
            $object->setRounding($data->{'rounding'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAuto()) {
            $data->{'auto'} = $object->getAuto();
        }
        if (null !== $object->getManual()) {
            $data->{'manual'} = $object->getManual();
        }
        if (null !== $object->getBonuses()) {
            $data->{'bonuses'} = $object->getBonuses();
        }
        if (null !== $object->getPromocode()) {
            $data->{'promocode'} = $object->getPromocode();
        }
        if (null !== $object->getOffer()) {
            $data->{'offer'} = $object->getOffer();
        }
        if (null !== $object->getRounding()) {
            $data->{'rounding'} = $object->getRounding();
        }

        return $data;
    }
}
