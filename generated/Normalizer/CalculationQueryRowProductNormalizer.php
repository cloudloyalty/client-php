<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CalculationQueryRowProductNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Model\\CalculationQueryRowProduct';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Model\\CalculationQueryRowProduct';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Model\CalculationQueryRowProduct();
        if (property_exists($data, 'externalId')) {
            $object->setExternalId($data->{'externalId'});
        }
        if (property_exists($data, 'sku')) {
            $object->setSku($data->{'sku'});
        }
        if (property_exists($data, 'title')) {
            $object->setTitle($data->{'title'});
        }
        if (property_exists($data, 'category')) {
            $object->setCategory($data->{'category'});
        }
        if (property_exists($data, 'categoryExternalId')) {
            $object->setCategoryExternalId($data->{'categoryExternalId'});
        }
        if (property_exists($data, 'buyingPrice')) {
            $object->setBuyingPrice($data->{'buyingPrice'});
        }
        if (property_exists($data, 'blackPrice')) {
            $object->setBlackPrice($data->{'blackPrice'});
        }
        if (property_exists($data, 'redPrice')) {
            $object->setRedPrice($data->{'redPrice'});
        }
        if (property_exists($data, 'minPrice')) {
            $object->setMinPrice($data->{'minPrice'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getExternalId()) {
            $data->{'externalId'} = $object->getExternalId();
        }
        if (null !== $object->getSku()) {
            $data->{'sku'} = $object->getSku();
        }
        if (null !== $object->getTitle()) {
            $data->{'title'} = $object->getTitle();
        }
        if (null !== $object->getCategory()) {
            $data->{'category'} = $object->getCategory();
        }
        if (null !== $object->getCategoryExternalId()) {
            $data->{'categoryExternalId'} = $object->getCategoryExternalId();
        }
        if (null !== $object->getBuyingPrice()) {
            $data->{'buyingPrice'} = $object->getBuyingPrice();
        }
        if (null !== $object->getBlackPrice()) {
            $data->{'blackPrice'} = $object->getBlackPrice();
        }
        if (null !== $object->getRedPrice()) {
            $data->{'redPrice'} = $object->getRedPrice();
        }
        if (null !== $object->getMinPrice()) {
            $data->{'minPrice'} = $object->getMinPrice();
        }

        return $data;
    }
}
