<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ClientInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Model\\ClientInfo';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Model\\ClientInfo';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Model\ClientInfo();
        if (property_exists($data, 'bonuses')) {
            $object->setBonuses($data->{'bonuses'});
        }
        if (property_exists($data, 'pendingBonuses')) {
            $object->setPendingBonuses($data->{'pendingBonuses'});
        }
        if (property_exists($data, 'phoneNumber')) {
            $object->setPhoneNumber($data->{'phoneNumber'});
        }
        if (property_exists($data, 'email')) {
            $object->setEmail($data->{'email'});
        }
        if (property_exists($data, 'surname')) {
            $object->setSurname($data->{'surname'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'patronymicName')) {
            $object->setPatronymicName($data->{'patronymicName'});
        }
        if (property_exists($data, 'fullName')) {
            $object->setFullName($data->{'fullName'});
        }
        if (property_exists($data, 'gender')) {
            $object->setGender($data->{'gender'});
        }
        if (property_exists($data, 'birthdate')) {
            $object->setBirthdate(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'birthdate'}));
        }
        if (property_exists($data, 'card')) {
            $object->setCard($data->{'card'});
        }
        if (property_exists($data, 'cardString')) {
            $object->setCardString($data->{'cardString'});
        }
        if (property_exists($data, 'isEmailSubscribed')) {
            $object->setIsEmailSubscribed($data->{'isEmailSubscribed'});
        }
        if (property_exists($data, 'isPhoneSubscribed')) {
            $object->setIsPhoneSubscribed($data->{'isPhoneSubscribed'});
        }
        if (property_exists($data, 'externalId')) {
            $object->setExternalId($data->{'externalId'});
        }
        if (property_exists($data, 'extraFields')) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'extraFields'} as $key => $value) {
                $values[$key] = $value;
            }
            $object->setExtraFields($values);
        }
        if (property_exists($data, 'level')) {
            $object->setLevel($data->{'level'});
        }
        if (property_exists($data, 'children')) {
            $values_1 = [];
            foreach ($data->{'children'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'CloudLoyalty\\Api\\Model\\ClientInfoChildrenItem', 'json', $context);
            }
            $object->setChildren($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBonuses()) {
            $data->{'bonuses'} = $object->getBonuses();
        }
        if (null !== $object->getPendingBonuses()) {
            $data->{'pendingBonuses'} = $object->getPendingBonuses();
        }
        if (null !== $object->getPhoneNumber()) {
            $data->{'phoneNumber'} = $object->getPhoneNumber();
        }
        if (null !== $object->getEmail()) {
            $data->{'email'} = $object->getEmail();
        }
        if (null !== $object->getSurname()) {
            $data->{'surname'} = $object->getSurname();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getPatronymicName()) {
            $data->{'patronymicName'} = $object->getPatronymicName();
        }
        if (null !== $object->getFullName()) {
            $data->{'fullName'} = $object->getFullName();
        }
        if (null !== $object->getGender()) {
            $data->{'gender'} = $object->getGender();
        }
        if (null !== $object->getBirthdate()) {
            $data->{'birthdate'} = $object->getBirthdate()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getCard()) {
            $data->{'card'} = $object->getCard();
        }
        if (null !== $object->getCardString()) {
            $data->{'cardString'} = $object->getCardString();
        }
        if (null !== $object->getIsEmailSubscribed()) {
            $data->{'isEmailSubscribed'} = $object->getIsEmailSubscribed();
        }
        if (null !== $object->getIsPhoneSubscribed()) {
            $data->{'isPhoneSubscribed'} = $object->getIsPhoneSubscribed();
        }
        if (null !== $object->getExternalId()) {
            $data->{'externalId'} = $object->getExternalId();
        }
        if (null !== $object->getExtraFields()) {
            $values = new \stdClass();
            foreach ($object->getExtraFields() as $key => $value) {
                $values->{$key} = $value;
            }
            $data->{'extraFields'} = $values;
        }
        if (null !== $object->getLevel()) {
            $data->{'level'} = $object->getLevel();
        }
        if (null !== $object->getChildren()) {
            $values_1 = [];
            foreach ($object->getChildren() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'children'} = $values_1;
        }

        return $data;
    }
}
