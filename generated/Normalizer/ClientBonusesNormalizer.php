<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CloudLoyalty\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ClientBonusesNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CloudLoyalty\\Api\\Model\\ClientBonuses';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CloudLoyalty\\Api\\Model\\ClientBonuses';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \CloudLoyalty\Api\Model\ClientBonuses();
        if (property_exists($data, 'available')) {
            $object->setAvailable($data->{'available'});
        }
        if (property_exists($data, 'pending')) {
            $object->setPending($data->{'pending'});
        }
        if (property_exists($data, 'reserved')) {
            $object->setReserved($data->{'reserved'});
        }
        if (property_exists($data, 'total')) {
            $object->setTotal($data->{'total'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAvailable()) {
            $data->{'available'} = $object->getAvailable();
        }
        if (null !== $object->getPending()) {
            $data->{'pending'} = $object->getPending();
        }
        if (null !== $object->getReserved()) {
            $data->{'reserved'} = $object->getReserved();
        }
        if (null !== $object->getTotal()) {
            $data->{'total'} = $object->getTotal();
        }

        return $data;
    }
}
