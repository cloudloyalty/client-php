openapi: 3.0.0
info:
  title: Cloud Loyalty API
  description: |
    # CloudLoyalty API

    Процессинг представляет собой веб-приложение, предоставляющее API по протоколу HTTPS.

    Все HTTP-запросы выполняются методом POST, тело запроса содержит JSON-документ. В ответе возвращается также JSON-документ. Каждый запрос должен содержать HTTP-заголовки ```Accept: application/json``` и ```Content-Type: application/json```.

    Базовый URL процессинга: https://api.cloudloyalty.ru/ (может быть изменен в ходе эксплуатации по договоренности сторон).

    API не поддерижвает CORS и не предназначен для вызова из браузера или мобильного приложения. Все запросы должны делаться с сервера.

    ### Аутентификация запросов

    Для защиты от несанкционированного доступа процессинг требует передачу секретного ключа в каждом запросе.

    Ключ передается в заголовке `X-Processing-Key` HTTP-запроса:
    ```
    POST https://api.cloudloyalty.ru/get-balance HTTP/1.1
    Accept: application/json
    Content-Type: application/json
    Cache-Control: no-cache
    X-Processing-Key: secret_key_string

    <Request body>
    ```

    Не сообщайте секретный ключ третьим лицам.

    Защита ключа при передаче запроса по сети обеспечивается использованием протокола HTTPS.

    При получении запроса, не содержащего ключ, либо содержащего неверный ключ, процессинг возвращает ошибку ```403 Forbidden```.

    ### Форматы данных

    #### Строки
    Для строк используется кодировка UTF-8.

    #### Дата и время
    С целью учёта локального времени при регистрации и выполнении операций отметка даты и времени во всех документах (и выгрузках), пересылаемых между системами форматируется в соответствии с RFC 3339 "Date and Time on the Internet: Timestamps" (http://tools.ietf.org/html/rfc3339).

    Пример: `1996-12-19T16:39:57-08:00`

    #### Денежные величины
    Все денежные величины (стоимость товаров, суммы покупки) указываются в рублях. С технической точки зрения они представляются вещественным числом с фиксированной точностью (2 знака после запятой).

    #### Целочисленные величины
    К целочисленным величинам относятся: количество товаров, суммы бонусов.

    ### Обработка ошибок

    Основные ошибки принятия запроса обозначаются кодами ответа HTTP:

    | Код ответа                  | Описание ошибки                                   |
    |-----------------------------|---------------------------------------------------|
    | `404 Not Found`             | Неверный адрес для отправки запроса               |
    | `403 Forbidden`             | Ключ аутентификации не передан или некорректен    |
    | `405 Not Allowed`           | Неверный тип запроса (например, GET вместо POST)  |
    | `500 Internal Server Error` | Сервер не выполнил запрос из-за внутренней ошибки |

    При ответах сервера, отличных от `200 OK`, тело не содержит JSON-документ.

    #### Ошибки процессинга

    При возникновении ошибок во время обработки запросов, процессинг формирует ответный JSON документ следующего содержания:
    ```
    {
       "errorCode":1,
       "description":"Чек не обработан процессингом или обработан с ошибкой"
    }
    ```

    Параметры ответа:
    - `errorCode` - цифровой код ошибки
    - `description` - текстовое описание ошибки

    HTTP-код ответа с описанием ошибки - `200 OK`.


    #### Коды ошибок процессинга

    | Код       | Описание ошибки                                                 |
    |-----------|-----------------------------------------------------------------|
    | 1         | Чек не обработан процессингом или обработан с ошибкой           |
    | 2         | В запросе к процессингу обнаружена ошибка или неверный вид JSON |
    | 3         | Клиент не найден                                                |
    | 4         | Аккаунт клиента заблокирован                                    |
    | 5         | Не найден магазин                                               |
    | 6         | Списание бонусов превышает допустимое значение                  |
    | 10        | Возвращаемый товар не найден в чеке продажи                     |
    | 11        | Сумма возврата больше суммы продажи                             |
    | 13        | Чек продажи не найден на сервере процессинга                    |
    | 14        | Чек для отмены не найден                                        |
    | 15        | Отмена допускается только для последней операции                |
    | 16        | Превышен допустимый интервал времени для отмены операции        |
    | 17        | Чек с данным номером уже обработан                              |
    | 20        | Номер телефона клиента не валиден                               |
    | 21        | Продажа не найдена                                              |
    | 22        | Не передан ключ аутентификации                                  |
    | 23        | Клиент не аутентифицирован                                      |
    | 24        | Клиент с таким номером телефона уже существует                  |
    | 25        | Карта уже привязана к другому клиенту                           |
    | 26        | Код подтверждения не отправлялся                                |
    | 27        | Код подтверждения некорректен                                   |
    | 28        | Слишком частая отправка кода подтверждения                      |
    | 29        | У клиента не задан номер телефона                               |
    | 30        | Клиент с таким внешним идентификатором уже существует           |
    | 31        | Заказ не найден                                                 |
    | 32        | Заказ уже обработан                                             |
    | 33        | Промокод не найден                                              |
    | 34        | Условия промокода не выполнены                                  |
    | 35        | Промокод уже использован максимальное число раз                 |
    | 36        | Время действия промокода еще не наступило или уже прошло        |
    | 37        | Промокод работает только совместно с бонусным счетом            |

  contact:
    name: Поддержка
    email: support@cloudloyalty.ru
  version: 2.0.0

servers:
  - url: https://api-test.cloudloyalty.ru
    description: Тестовый сервер
  - url: https://api.cloudloyalty.ru
    description: Рабочий сервер

components:
  securitySchemes:
    apiKey:
      description: Ключ авторизации
      type: apiKey
      name: X-Processing-Key
      in: header

  schemas:
    clientQuery:
      description: |
        Данные о клиенте, для которого делается запрос.

        Делать запрос можно по номеру телефона клиента, по номеру карты или по внешнему идентификатору.

        Если клиент не задан для чека, продажа считается анонимной, в этом случае бонусная программа не работает.
      type: object
      properties:
        phoneNumber:
          description: Номер телефона
          example: "+79991112233"
          type: string
          minLength: 1
          maxLength: 30
        card:
          description: Штрих-код карты
          example: "990000012345678"
          type: string
          pattern: "^[0-8]?[0-9]{1,18}$"
        externalId:
          description: Произвольный идентификатор
          example: customer+0001234@mydomain.com
          type: string
          minLength: 1
          maxLength: 100
      additionalProperties: false
      anyOf:
        - required:
            - phoneNumber
        - required:
            - card
        - required:
            - externalId

    shopQuery:
      description: Данные о торговой точке
      type: object
      properties:
        code:
          description: Код
          example: SH-0001
          type: string
          minLength: 1
        name:
          description: Название
          example: Шоурум на ул. Победы, 6
          type: string
          minLength: 1
      additionalProperties: false
      required:
        - code
        - name

    cashierQuery:
      description: Данные о кассире
      type: object
      properties:
        code:
          description: Код или табельный номер
          example: M000123
          type: string
          minLength: 1
        name:
          description: Имя
          example: Татьяна Белых
          type: string
          minLength: 1
      additionalProperties: false
      required:
        - code
        - name

    calculationQuery:
      description: Данные чека или заказа для расчета
      type: object
      properties:
        client:
          $ref: "#/components/schemas/clientQuery"
        shop:
          $ref: "#/components/schemas/shopQuery"
        cashier:
          $ref: "#/components/schemas/cashierQuery"
        executedAt:
          description: |
            Дата формирования чека или заказа.

            По умолчанию используется текущие дата и время.
          type: string
          format: date-time
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}$"
        rows:
          description: Список строк чека или заказа
          type: array
          items:
            $ref: "#/components/schemas/calculationQueryRow"
          minItems: 1
        applyBonuses:
          description: |
            Количество бонусов, которое требуется списать.

            Если задано `auto`, будет списано максимально возможное количество.
          default: 0
          oneOf:
            - type: integer
              format: int32
              minimum: 0
            - type: string
              enum:
                - auto
        collectBonuses:
          description: |
            Количество бонусов к начисление за текущий чек или заказ.

            Если задано `auto`, расчет этого значения будет произведен по правилам, заданным на сервере.
          default: auto
          oneOf:
            - type: integer
              format: int32
              minimum: 0
            - type: string
              enum:
                - auto
        promocode:
          description: Промокод
          example: CODE-123-456
          type: string
          minLength: 1
        discountRoundStep:
          description: Кратность округления суммы всех скидок
          default: 0
          type: number
          format: float
          minimum: 0
          maximum: 1
      additionalProperties: false
      required:
        - shop
        - rows

    calculationQueryRow:
      description: Строка чека для расчета
      type: object
      properties:
        id:
          description: Произвольный идентификатор строки, сервером не используется
          example: 1
          type: string
          minLength: 1
        product:
          description: Данные о товаре/услуге
          type: object
          properties:
            externalId:
              description: ID номенклатуры во внешней системе
              example: 3bc89a35-971e-11e9-8022-1c1b0d3b8956
              type: string
              minLength: 1
            sku:
              description: Код номенклатуры или артикул
              example: A000012345
              type: string
              minLength: 1
            title:
              description: Наименование товара или услуги
              example: Куртка кожаная жен 46-48
              type: string
              minLength: 1
            category:
              description: |
                Категория товара или услуги.

                Если используется несколько уровней вложенности категорий, в этой строке следует передать
                список наименований всех уровней, разделенных точкой с запятой.
              example: Женщинам; Куртки и пуховики; Кожаные куртки
              type: string
              minLength: 1
            categoryExternalId:
              description: ID категории во внешней системе
              example: 656e48da-971e-11e9-8022-1c1b0d3b8956
              type: string
              minLength: 1
            buyingPrice:
              description: |
                Закупочная цена единицы товара.

                Используется для ограничения максимальной скидки или расчета валовой прибыли.
              example: 9680
              type: number
              format: float
              minimum: 0
            blackPrice:
              description: Обычная цена единицы товара или услуги
              example: 16000
              type: number
              format: float
              minimum: 0
            redPrice:
              description: Новая цена единицы товара или услуги
              example: 14499
              type: number
              format: float
              minimum: 0
            minPrice:
              description: Минимальная цена единицы товара или услуги
              default: 0
              type: number
              format: float
              minimum: 0
          additionalProperties: false
          required:
            - sku
            - blackPrice
        qty:
          description: Количество
          example: 1
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
        autoDiscount:
          description: Автоскидка, примененная к строке
          default: 0
          type: number
          format: float
          minimum: 0
        manualDiscount:
          description: Ручная скидка, примененная к строке
          default: 0
          type: number
          format: float
          minimum: 0
        noApplyBonuses:
          description: Запрет применения бонусов к этой строке
          default: false
          type: boolean
        noCollectBonuses:
          description: Запрет начисления бонусов за эту строку
          default: false
          type: boolean
        noPromocode:
          description: Запрет применения скидки по промокоду к этой строке
          default: false
          type: boolean
        noOffer:
          description: Запрет применения акций к этой строке
          default: false
          type: boolean
        maxDiscount:
          description: Величина максимальной скидки для этой строки
          type: number
          format: float
          minimum: 0
      additionalProperties: false
      required:
        - product
        - qty

    calculationResult:
      description: Результат расчета
      type: object
      properties:
        rows:
          description: Список строк чека, количество и порядок соответствует строкам из запроса
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/calculationResultRow"
        summary:
          description: Сводная информация по чеку
          type: object
          properties:
            totalDiscount:
              description: Сумма всех скидок по чеку
              type: number
              format: float
              minimum: 0
            discounts:
              $ref: "#/components/schemas/calculationResultDiscounts"
        bonuses:
          $ref: "#/components/schemas/calculationResultBonuses"
        promocode:
          $ref: "#/components/schemas/calculationResultPromocode"
      required:
        - rows
        - summary

    calculationResultRow:
      description: Строка чека
      type: object
      properties:
        id:
          description: Идентификатор строки как он передан в запросе
          type: string
          minLength: 1
        totalDiscount:
          description: Сумма всех скидок по строке
          type: number
          format: float
          minimum: 0
        discounts:
          $ref: "#/components/schemas/calculationResultDiscounts"
        bonuses:
          $ref: "#/components/schemas/calculationResultRowBonuses"
        offers:
          description: Информация об акциях, примененных к строке
          type: array
          items:
            type: object
            properties:
              id:
                description: Внутренний идентификатор акции
                type: integer
              code:
                description: Код
                type: string
                minLength: 1
              name:
                description: Название
                type: string
                minLength: 1
            required:
              - id
              - code
              - name
      required:
        - totalDiscount
        - discounts

    calculationResultDiscounts:
      description: Детализация по скидкам
      type: object
      properties:
        auto:
          description: Автоскидка
          type: number
          format: float
          minimum: 0
        manual:
          description: Ручная скидка
          type: number
          format: float
          minimum: 0
        bonuses:
          description: Скидка по бонусам
          type: number
          format: float
          minimum: 0
        promocode:
          description: Скидка по промокоду
          type: number
          format: float
          minimum: 0
        offer:
          description: Скидка по акции
          type: number
          format: float
          minimum: 0
        rounding:
          description: Округление
          type: number
          format: float
          minimum: 0
      required:
        - auto
        - manual
        - bonuses
        - promocode
        - offer
        - rounding

    calculationResultBonuses:
      description: Результат расчета бонусов
      type: object
      properties:
        applied:
          description: Применено
          type: integer
          format: int32
          minimum: 0
        collected:
          description: Накоплено
          type: integer
          format: int32
          minimum: 0
        maxToApply:
          description: |
            Максимальное количество бонусов, которое можно применить к чеку.

            Это значение расчитано на основе доступных бонусов на счету клиента и правил применения бонусов к чеку.
          type: integer
          format: int32
          minimum: 0
        error:
          $ref: "#/components/schemas/error"

    calculationResultRowBonuses:
      description: Результат расчета бонусов для строки
      type: object
      properties:
        applied:
          description: Применено
          type: integer
          format: int32
          minimum: 0
        collected:
          description: Накоплено
          type: integer
          format: int32
          minimum: 0
      required:
        - applied
        - collected

    calculationResultPromocode:
      description: Результат применения промокода
      type: object
      properties:
        applied:
          description: Применен или нет
          type: boolean
        error:
          $ref: "#/components/schemas/error"
      required:
        - applied

    error:
      description: Ошибка
      type: object
      properties:
        code:
          description: Код
          type: integer
          format: int32
        description:
          description: Описание
          type: string
          minLength: 1
        hint:
          description: Детали ошибки
          type: string
          minLength: 1
      required:
        - code
        - description

    clientBonuses:
      description: Состояние бонусного счета клиента после операции
      type: object
      properties:
        available:
          description: Доступно
          type: integer
          format: int32
        pending:
          description: Заморожено
          type: integer
          format: int32
        reserved:
          description: Зарезервировано
          type: integer
          format: int32
        total:
          description: Всего
          type: integer
          format: int32
      required:
        - available
        - pending
        - reserved
        - total

    clientInfo:
      description: Информация о клиенте
      type: object
      properties:
        bonuses:
          type: integer
          format: int32
          description: Баланс доступных бонусов
        pendingBonuses:
          type: integer
          format: int32
          description: Баланс ожидаемых бонусов
        phoneNumber:
          type: string
          description: Номер телефона клиента
        email:
          type: string
          description: Адрес электронной почты клиента
        surname:
          type: string
          description: Фамилия
        name:
          type: string
          description: Имя
        patronymicName:
          type: string
          description: Отчество
        fullName:
          type: string
          description: Фамилия, имя и отчество одной строкой
        gender:
          $ref: "#/components/schemas/gender"
        birthdate:
          type: string
          format: date-time
          description: |
            Дата рождения.

            Если год рождения неизвестен, возвращается 1900.
        card:
          type: integer
          format: int64
          description: Номер бонусной карты
        cardString:
          type: string
          description: Номер бонусной карты в виде строки
        isEmailSubscribed:
          type: boolean
          description: Флаг, подписан ли клиент на маркетинговые рассылки по электронной почте
        isPhoneSubscribed:
          type: boolean
          description: Флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber
        externalId:
          type: string
          description: Внешний идентификатор клиента
        extraFields:
          type: object
          description: Дополнительные параметры клиента
          additionalProperties: true
        level:
          type: integer
          format: int32
          description: Уровень клиента в программе лояльности
        children:
          type: array
          items:
            type: object
            description: Список детей
            properties:
              name:
                type: string
                description: Имя ребенка
              birthdate:
                type: string
                description: |
                  Дата или день рождения.

                  Если год рождения неизвестен, возвращается 1900.
              gender:
                $ref: "#/components/schemas/gender"

    gender:
      description: |
        Пол.

        Значения:
          - 0 - пол неизвестен,
          - 1 - мужской,
          - 2 - женский
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2

    operationResult:
      type: object
      properties:
        remainingAmount:
          type: number
          format: float
          description: Сумма к оплате, оставшаяся после погашения части общей суммы примененными бонусами
        appliedBonuses:
          type: integer
          format: int32
          description: |
            Количество примененных бонусов.

            Для заказа в этом поле содержится количество не списанных, а зарезервированных бонусов.
        collectedBonuses:
          type: integer
          format: int32
          description: |
            Количество начисляемых бонусов за покупку.

            Для заказа это поле содержит количество бонусов, которое будет начислено после подтверждения.

paths:
  /v2/calculate-purchase:
    post:
      description: |
        Расчет скидок и бонусов для чека продажи или заказа.

        Не создает продажу, а вместо этого просто делает расчет.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                calculationQuery:
                  $ref: "#/components/schemas/calculationQuery"
              required:
                - calculationQuery
      responses:
        '200':
          description: |
            Результат расчета.

            Возвращается либо `calculationResult`, либо `error`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  calculationResult:
                    $ref: "#/components/schemas/calculationResult"
                  error:
                    $ref: "#/components/schemas/error"

  /set-purchase:
    post:
      description: |
        Предварительное создание продажи на сервере.

        Рассчитывает скидки и бонусы для чека продажи и резервирует необходимое количество бонусов
        на время, достаточное для проведения транзакции на кассе. Для каждой предварительно размещенной
        продажи выдается тикет, который используется при ее дальнейшем подтверждении или отмене.

        Одновременно на сервере может быть только одна предварительно созданная продажа для одного клиента.
        При попытке разместить вторую транзакцию для того же самого клиента, первая будет удалена, а вторая -
        размещена на ее место.

        Если состав чека или условия примения промокода и бонусов изменились, касса должна вызвать этот метод
        заново с тем же кодом транзакции `txid`, передав новые детали чека.

        Как только транзакция на кассе будет проведена, нужно подтвердить продажу методом `/confirm-ticket`.

        Если транзакция на кассе прошла неуспешно и ее отменили, нужно отменить продажу на сервере методом `/discard-ticket`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                txid:
                  example: TX0001-001234
                  description: Идентификатор транзакции
                  type: string
                  minLength: 1
                calculationQuery:
                  $ref: "#/components/schemas/calculationQuery"
              required:
                - txid
                - calculationQuery
      responses:
        '200':
          description: |
            Результат предварительного создания продажи.

            Возвращается блок с ошибкой или данные с результатами расчета.

            Блок `clientBonuses` не возвращается, если в запросе не был указан клиент.
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientBonuses:
                    $ref: "#/components/schemas/clientBonuses"
                  calculationResult:
                    $ref: "#/components/schemas/calculationResult"
                  ticket:
                    description: |
                      Тикет, который нужно передать в запросе на подтверждение или отмену предварительно
                      созданной продажи
                    type: string
                  error:
                    $ref: "#/components/schemas/error"

  /confirm-ticket:
    post:
      description: Подтверждение предварительно созданной продажи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                txid:
                  description: Идентификатор транзакции
                  example: TX0001-001234
                  type: string
                  minLength: 1
                sessionNum:
                  description: Порядковый номер смены
                  example: 123
                  type: string
                  minLength: 1
                receiptNum:
                  description: Порядковый номер чека
                  example: 456
                  type: string
                  minLength: 1
                ticket:
                  description: Тикет, выданный после предварительного создания продажи
                  type: string
                  pattern: "^[0-9]{8}-[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{12}$"
              required:
                - txid
                - ticket
      responses:
        '200':
          description: |
            Результат подтверждения продажи.

            Возвращается блок с ошибкой или пустой объект.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "#/components/schemas/error"

  /discard-ticket:
    post:
      description: Отмена предварительно созданной продажи
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                txid:
                  description: Идентификатор транзакции
                  type: string
                  minLength: 1
                ticket:
                  description: Тикет, выданный после предварительного создания продажи
                  type: string
                  pattern: "^[0-9]{8}-[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{12}$"
              required:
                - txid
                - ticket
      responses:
        '200':
          description: |
            Результат отмены продажи.

            Возвращается блок с ошибкой или пустой объект.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "#/components/schemas/error"

  /get-balance:
    post:
      description: |
        Метод позволяет узнать количество ожидаемых и доступных бонусов на балансе пользователя и другую информацию.

        Делать запрос можно по номеру телефона клиента, по номеру карты или по внешнему идентификатору.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/clientQuery"
      responses:
        '200':
          description: |
            Информация о клиенте либо `error`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  client:
                    $ref: "#/components/schemas/clientInfo"
                  walletsLink:
                    type: string
                    description: |
                      Ссылка на скачивание электронной карты.

                      Возвращается, только если выдача электронных карт настроена.
                  bonuses:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: integer
                          format: int32
                          description: Количество бонусов
                        expireAt:
                          type: string
                          format: date-time
                          description: |
                            Дата сгорания бонуса.

                            Дата передается только для тех бонусов, которые сгорают в ближайшие 50 дней.
                  error:
                    $ref: "#/components/schemas/error"

  /set-order:
    post:
      description: |
        Создает заказ.

        Если запрос делается с указанием идентификатора уже существующего заказа, новый заказ не создается,
        вместо этого вносятся изменения в уже существующий заказ. Если существующий заказ уже подтвержден или отменен,
        возвращается ошибка 32 "Заказ уже обработан".

        При создании заказа на счету клиента резервируется количество бонусов, переданное в applyBonuses.
        Несмотря на то, что реального списания бонусов не происходит, количество доступных бонусов на счету
        клиента уменьшается на зарезервированное количество.

        При изменении заказа и передачи нового значения applyBonuses, ранее зарезервированные бонусы освобождаются
        и резервируется новое количество.

        После создания заказа его можно подтвердить методом /confirm-order или отменить методом /cancel-order.

        Делать запрос можно по номеру телефона клиента, по номеру карты или по внешнему идентификатору.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                client:
                  $ref: "#/components/schemas/clientQuery"
                order:
                  type: object
                  additionalProperties: false
                  properties:
                    id:
                      type: string
                      minLength: 1
                      description: Идентификатор заказа
                    executedAt:
                      type: string
                      format: date-time
                      description: |
                        Дата и время создания заказа.

                        Для нового заказа, если не задана, считается равной текущим дате и времени.
                    shopCode:
                      type: string
                      minLength: 1
                      description: Код магазина, в котором осуществляется операция
                    shopName:
                      type: string
                      minLength: 1
                      description: Полное название магазина, в котором осуществляется операция
                    totalAmount:
                      type: number
                      format: float
                      minimum: 0
                      description: |
                        Общая сумма заказа.

                        Сумма к оплате клиентом. Если на стороне магазина предусмотрены скидки,
                        указанная сумма должна быть с учетом этих скидок.
                    loyalty:
                      type: object
                      additionalProperties: false
                      properties:
                        action:
                          type: string
                          description: |
                            Выбранная операция с бонусами по данному заказу.

                            Возможны следующие значения:
                              - collect - бонусы будут только начислены для клиента
                              - apply - бонусы будут только списаны с клиента
                              - apply-collect - бонусы будут сначала списаны, а затем начислены на оставшуюся сумму для клиента
                          enum:
                            - collect
                            - apply
                            - apply-collect
                        applyingAmount:
                          type: number
                          format: float
                          minimum: 0
                          description: |
                            Сумма товаров, к которым можно применить бонусы.

                            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, к которым запрещено применять бонусы.

                            На основе этой суммы система рассчитает максимальное количество бонусов, которые клиент может применить к покупке, но фактически примененное количество передается в другом параметре - applyBonuses.

                            Не может превышать totalAmount.

                            Если не указана, считается равной totalAmount.
                        collectingAmount:
                          type: number
                          format: float
                          minimum: 0
                          description: |
                            Сумма товаров, с которых клиент получит бонусы.

                            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, за которые запрещено начислять бонусы.

                            На основе этой суммы система рассчитает, сколько бонусов клиент получит за покупку.

                            Может быть как меньше, так и больше totalAmount.

                            Если не указана, считается равной totalAmount.
                        applyBonuses:
                          type: number
                          format: float
                          minimum: 0
                          description: |
                            Количество используемых бонусов для покупки.

                            Не может превышать количество доступных бонусов клиента.

                            Не может превышать максимальное количество бонусов к применению, рассчитанное на основе applyingAmount.
                        collectBonuses:
                          type: number
                          format: float
                          minimum: 0
                          description: |
                            Количество бонусов, которые будут начислены клиенту за покупку.

                            Используется, когда магазин хочет использовать свою логику расчета бонусов, начисляемых за покупку. Если не задано, рассчитывается автоматически.

                            Если задано, значение collectingAmount игнорируется.
                      required:
                        - action
                        - applyBonuses
                    promocode:
                      type: string
                      minLength: 1
                      description: Промокод
                    items:
                      description: Список позиций заказа
                      type: array
                      items:
                        type: object
                        additionalProperties: false
                        required:
                          - sku
                          - itemTitle
                          - itemCount
                          - price
                        properties:
                          sku:
                            type: string
                            minLength: 1
                            description: Артикул товара
                          itemTitle:
                            type: string
                            minLength: 1
                            description: Название товара
                          itemCount:
                            type: number
                            format: float
                            minimum: 0
                            description: Количество товара в чеке
                          buyingPrice:
                            type: number
                            format: float
                            minimum: 0
                            description: Закупочная цена единицы товара
                          price:
                            type: number
                            format: float
                            minimum: 0
                            description: Цена единицы товара
                          amount:
                            type: number
                            format: float
                            minimum: 0
                            description: |
                              Сумма.

                              Если не указана, рассчитывается как price * itemCount.
                  required:
                    - id
                    - shopCode
                    - shopName
                    - totalAmount
                    - loyalty
              required:
                - client
                - order
      responses:
        '200':
          description: |
            Возвращается `operationResult` и `clientBonuses` при положительном исходе.

            Иначе возвращается `error`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  operationResult:
                    $ref: "#/components/schemas/operationResult"
                  clientBonuses:
                    $ref: "#/components/schemas/clientBonuses"
                  error:
                    $ref: "#/components/schemas/error"

  /confirm-order:
    post:
      description: |
        Подтверждает ранее созданный заказ.

        Нельзя подтвердить уже подтвержденный или отменный заказ, при попытке это сделать возвращается
        ошибка 32 "Заказ уже обработан".

        При подтверждении заказа у клиента списываются зарезервированные при создании заказа бонусы
        и на основе данных заказа создается покупка.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                orderId:
                  type: string
                  minLength: 1
                  description: Идентификатор заказа для подтверждения
                executedAt:
                  type: string
                  format: date-time
                  description: |
                    Дата операции подтверждения.

                    Если не задана, считается равной текущим дате и времени.
              required:
                - orderId
      responses:
        '200':
          description: |
            Возвращается `operationResult` и `clientBonuses` при положительном исходе.

            Иначе возвращается `error`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  operationResult:
                    $ref: "#/components/schemas/operationResult"
                  clientBonuses:
                    $ref: "#/components/schemas/clientBonuses"
                  error:
                    $ref: "#/components/schemas/error"

  /cancel-order:
    post:
      description: |
        Отменяет ранее созданный заказ.

        Нельзя отменить уже подтвержденный или отменный заказ, при попытке это сделать возвращается
        ошибка 32 "Заказ уже обработан".

        При отмене заказа клиенту возвращаются зарезервированные при создании заказа бонусы.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                orderId:
                  type: string
                  minLength: 1
                  description: Идентификатор заказа
                executedAt:
                  type: string
                  format: date-time
                  description: |
                    Дата операции.

                    Если не задана, считается равной текущим дате и времени.
              required:
                - orderId
      responses:
        '200':
          description: |
            Возвращается `operationResult` и `clientBonuses` при положительном исходе.

            Иначе возвращается `error`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  operationResult:
                    $ref: "#/components/schemas/operationResult"
                  clientBonuses:
                    $ref: "#/components/schemas/clientBonuses"
                  error:
                    $ref: "#/components/schemas/error"
